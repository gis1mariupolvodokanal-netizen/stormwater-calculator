import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏ n
materials_n = {
    "–ë–µ—Ç–æ–Ω": 0.013,
    "–ü–í–•": 0.009,
    "–ß—É–≥—É–Ω": 0.014,
    "–ê—Å–±–µ—Å—Ç–æ—Ü–µ–º–µ–Ω—Ç": 0.011,
    "–°—Ç–∞–ª—å": 0.012
}

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤", layout="wide")
st.title("üíß –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤ (—Ñ–æ—Ä–º—É–ª–∞ –ú–∞–Ω–Ω–∏–Ω–≥–∞)")

# –í—ã–±–æ—Ä —Ñ–æ—Ä–º—ã —Ç—Ä—É–±—ã
pipe_shape = st.selectbox("–§–æ—Ä–º–∞ —Ç—Ä—É–±—ã", ["–ö—Ä—É–≥–ª–∞—è", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è"])

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä—É–±—ã
num_segments = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä—É–±—ã", min_value=1, step=1, value=1)

segments = []
for i in range(num_segments):
    st.subheader(f"–°–µ–≥–º–µ–Ω—Ç {i+1}")
    col1, col2 = st.columns(2)
    with col1:
        if pipe_shape == "–ö—Ä—É–≥–ª–∞—è":
            D = st.number_input(f"–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.1, step=0.01, format="%.3f", key=f"D{i}")
        else:
            D = st.number_input(f"–®–∏—Ä–∏–Ω–∞ —Ç—Ä—É–±—ã —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.1, step=0.01, format="%.3f", key=f"b{i}")
            H = st.number_input(f"–í—ã—Å–æ—Ç–∞ —Ç—Ä—É–±—ã —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.1, step=0.01, format="%.3f", key=f"H{i}")
        h = st.number_input(f"–í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.07, step=0.01, format="%.3f", key=f"h{i}")
        material = st.selectbox(f"–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç—Ä—É–±—ã —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}", list(materials_n.keys()), key=f"mat{i}")
    with col2:
        top1 = st.number_input(f"–í—ã—Å–æ—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=246.0, step=0.01, key=f"top1_{i}")
        depth1 = st.number_input(f"–ì–ª—É–±–∏–Ω–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=5.55, step=0.01, key=f"depth1_{i}")
        top2 = st.number_input(f"–í—ã—Å–æ—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=245.0, step=0.01, key=f"top2_{i}")
        depth2 = st.number_input(f"–ì–ª—É–±–∏–Ω–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=5.57, step=0.01, key=f"depth2_{i}")
        length = st.number_input(f"–î–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=73.2, step=0.1, key=f"length{i}")
    
    segments.append({
        "D": D,
        "H": H if pipe_shape == "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è" else None,
        "h": h,
        "material": material,
        "top1": top1,
        "depth1": depth1,
        "top2": top2,
        "depth2": depth2,
        "length": length
    })

total_Q_ls = 0
st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
for idx, seg in enumerate(segments):
    # –†–∞—Å—á–µ—Ç —É–∫–ª–æ–Ω–∞
    invert1 = seg["top1"] - seg["depth1"]
    invert2 = seg["top2"] - seg["depth2"]
    S = (invert1 - invert2) / seg["length"]

    n = materials_n[seg["material"]]

    if pipe_shape == "–ö—Ä—É–≥–ª–∞—è":
        r = seg["D"] / 2
        theta = 2 * np.arccos((r - seg["h"]) / r)
        A = (r**2 / 2) * (theta - np.sin(theta))
        P = r * theta
        fill_ratio = seg["h"] / seg["D"]
    else:
        b = seg["D"]
        H = seg["H"]
        y = seg["h"]
        A = b * y
        P = b + 2 * y
        fill_ratio = seg["h"] / seg["H"]

    R = A / P
    V = (1 / n) * (R ** (2/3)) * (S ** 0.5)
    Q_m3s = A * V
    Q_ls = Q_m3s * 1000
    total_Q_ls += Q_ls

    st.write(f"**–°–µ–≥–º–µ–Ω—Ç {idx+1}**")
    st.write(f"–£–∫–ª–æ–Ω S: `{S:.5f}` ({S*100:.3f} %)")
    st.write(f"–ü–ª–æ—â–∞–¥—å A: `{A:.6f}` –º¬≤")
    st.write(f"–°–º–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä P: `{P:.4f}` –º")
    st.write(f"–ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–π —Ä–∞–¥–∏—É—Å R: `{R:.4f}` –º")
    st.write(f"–°–∫–æ—Ä–æ—Å—Ç—å V: `{V:.3f}` –º/—Å")
    st.write(f"–†–∞—Å—Ö–æ–¥ Q: `{Q_m3s:.5f}` –º¬≥/—Å  = `{Q_ls:.3f}` –ª/—Å")

st.subheader("üí° –°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –≤—Å–µ–π –ª–∏–Ω–∏–∏")
st.write(f"**Qsum = {total_Q_ls:.3f} –ª/—Å**")

# ===== –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º =====
fig1, ax1 = plt.subplots(figsize=(6, 4))
Q_values = []
for seg in segments:
    invert1 = seg["top1"] - seg["depth1"]
    invert2 = seg["top2"] - seg["depth2"]
    S = (invert1 - invert2) / seg["length"]
    n = materials_n[seg["material"]]
    if pipe_shape == "–ö—Ä—É–≥–ª–∞—è":
        r = seg["D"] / 2
        theta = 2 * np.arccos((r - seg["h"]) / r)
        A = (r**2 / 2) * (theta - np.sin(theta))
        P = r * theta
    else:
        b = seg["D"]
        H = seg["H"]
        y = seg["h"]
        A = b * y
        P = b + 2 * y
    R = A / P
    V = (1 / n) * (R ** (2/3)) * (S ** 0.5)
    Q_values.append(A * V)
ax1.bar([f"–°–µ–≥–º–µ–Ω—Ç {i+1}" for i in range(len(segments))], Q_values, color="skyblue")
ax1.set_ylabel("Q, –º¬≥/—Å")
ax1.set_title("–†–∞—Å—Ö–æ–¥ Q –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
st.pyplot(fig1)

# ===== –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Q –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è =====
st.subheader("üìà –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å Q –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä—É–±—ã")
fig2, ax2 = plt.subplots(figsize=(6, 4))
for idx, seg in enumerate(segments):
    n = materials_n[seg["material"]]
    invert1 = seg["top1"] - seg["depth1"]
    invert2 = seg["top2"] - seg["depth2"]
    S = (invert1 - invert2) / seg["length"]

    fill_ratios = np.linspace(0.01, 1.0, 50)
    Q_curve = []
    if pipe_shape == "–ö—Ä—É–≥–ª–∞—è":
        r = seg["D"] / 2
        for fr in fill_ratios:
            h = fr * seg["D"]
            theta = 2 * np.arccos((r - h) / r)
            A = (r**2 / 2) * (theta - np.sin(theta))
            P = r * theta
            R = A / P
            V = (1 / n) * (R ** (2/3)) * (S ** 0.5)
            Q_curve.append(A * V)
    else:
        b = seg["D"]
        H = seg["H"]
        for fr in fill_ratios:
            h = fr * H
            A = b * h
            P = b + 2 * h
            R = A / P
            V = (1 / n) * (R ** (2/3)) * (S ** 0.5)
            Q_curve.append(A * V)
    ax2.plot(fill_ratios, Q_curve, label=f"–°–µ–≥–º–µ–Ω—Ç {idx+1}")
ax2.set_xlabel("–°—Ç–µ–ø–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (h/D –∏–ª–∏ h/H)")
ax2.set_ylabel("Q, –º¬≥/—Å")
ax2.set_title("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å Q –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä—É–±—ã")
ax2.legend()
st.pyplot(fig2)

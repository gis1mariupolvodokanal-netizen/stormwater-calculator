import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# --- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏ ---
materials_n = {
    "–ë–µ—Ç–æ–Ω": 0.013,
    "–ü–í–•": 0.009,
    "–ß—É–≥—É–Ω": 0.014,
    "–ê—Å–±–µ—Å—Ç–æ—Ü–µ–º–µ–Ω—Ç": 0.011,
    "–°—Ç–∞–ª—å": 0.012
}

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤", layout="wide")
st.title("üíß –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤ (–ú–∞–Ω–Ω–∏–Ω–≥)")

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def hydraulic_params_circular(D, h):
    r = D / 2
    theta = 2 * np.arccos((r - h) / r)
    A = (r**2 / 2) * (theta - np.sin(theta))  # –ø–ª–æ—â–∞–¥—å
    P = r * theta  # —Å–º–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä
    return A, P

def hydraulic_params_rectangular(b, h):
    A = b * h
    P = b + 2*h
    return A, P

def manning_flow(A, P, S, n):
    R = A / P
    V = (1 / n) * (R ** (2/3)) * (S ** 0.5)
    Q = A * V
    return R, V, Q

# --- –í–≤–æ–¥ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
shape = st.selectbox("–§–æ—Ä–º–∞ —Ç—Ä—É–±—ã", ["–ö—Ä—É–≥–ª–∞—è", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è"])
material = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç—Ä—É–±—ã", list(materials_n.keys()))
n = materials_n[material]

num_segments = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä—É–±—ã", min_value=1, max_value=10, value=1, step=1)

segments = []
for i in range(num_segments):
    st.markdown(f"### –°–µ–≥–º–µ–Ω—Ç {i+1}")
    col1, col2 = st.columns(2)
    with col1:
        if shape == "–ö—Ä—É–≥–ª–∞—è":
            D = st.number_input(f"–î–∏–∞–º–µ—Ç—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.1, step=0.01, format="%.3f", key=f"D{i}")
            h = st.number_input(f"–í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è h —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.07, step=0.01, format="%.3f", key=f"h{i}")
            geom = (D, h)
        else:
            b = st.number_input(f"–®–∏—Ä–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.2, step=0.01, format="%.3f", key=f"b{i}")
            h = st.number_input(f"–í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è h —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=0.15, step=0.01, format="%.3f", key=f"h{i}")
            geom = (b, h)
    with col2:
        top1 = st.number_input(f"–í—ã—Å–æ—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ (—Å–µ–≥–º–µ–Ω—Ç {i+1}), –º", value=246.0, step=0.01, key=f"top1_{i}")
        depth1 = st.number_input(f"–ì–ª—É–±–∏–Ω–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ (—Å–µ–≥–º–µ–Ω—Ç {i+1}), –º", value=5.55, step=0.01, key=f"depth1_{i}")
        top2 = st.number_input(f"–í—ã—Å–æ—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ (—Å–µ–≥–º–µ–Ω—Ç {i+1}), –º", value=245.0, step=0.01, key=f"top2_{i}")
        depth2 = st.number_input(f"–ì–ª—É–±–∏–Ω–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞ (—Å–µ–≥–º–µ–Ω—Ç {i+1}), –º", value=5.57, step=0.01, key=f"depth2_{i}")
        length = st.number_input(f"–î–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}, –º", value=73.2, step=0.1, key=f"length{i}")
    segments.append((geom, h, top1, depth1, top2, depth2, length))

# --- –†–∞—Å—á—ë—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º ---
results = []
for idx, (geom, h, top1, depth1, top2, depth2, length) in enumerate(segments):
    invert1 = top1 - depth1
    invert2 = top2 - depth2
    S = (invert1 - invert2) / length if length > 0 else 0.0001

    if shape == "–ö—Ä—É–≥–ª–∞—è":
        D, h = geom
        A, P = hydraulic_params_circular(D, h)
    else:
        b, h = geom
        A, P = hydraulic_params_rectangular(b, h)

    R, V, Q = manning_flow(A, P, S, n)
    results.append((idx+1, A, P, R, V, Q, Q*1000))

    # --- –í—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä—è–¥–æ–º ---
    col_left, col_right = st.columns([1,1.2])

    # –ü–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Å–µ—á–µ–Ω–∏–µ
    with col_left:
        fig, ax = plt.subplots(figsize=(3, 3))
        if shape == "–ö—Ä—É–≥–ª–∞—è":
            D, _ = geom
            circle = plt.Circle((0, 0), D/2, color="lightgray")
            ax.add_patch(circle)
            ax.fill_between(
                np.linspace(-D/2, D/2, 200),
                -D/2, -D/2+h,
                color="blue", alpha=0.5
            )
            ax.set_xlim(-D/2-0.05, D/2+0.05)
            ax.set_ylim(-D/2-0.05, D/2+0.05)
        else:
            b, _ = geom
            ax.add_patch(plt.Rectangle((-b/2, -h), b, h, color="blue", alpha=0.5))
            ax.add_patch(plt.Rectangle((-b/2, -geom[1]), b, geom[1], fill=False, edgecolor="black"))
            ax.set_xlim(-b/2-0.05, b/2+0.05)
            ax.set_ylim(-geom[1]-0.05, 0.05)
        ax.set_aspect("equal")
        ax.axis("off")
        ax.set_title(f"–°–µ–≥–º–µ–Ω—Ç {idx+1}: –ø–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Å–µ—á–µ–Ω–∏–µ", fontsize=10)
        st.pyplot(fig)

    # –ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–∞
    with col_right:
        fig, ax = plt.subplots(figsize=(3.5, 3))
        ax.bar(["Q"], [Q], color="blue")
        ax.set_ylabel("Q, –º¬≥/—Å")
        ax.set_title(f"–†–∞—Å—Ö–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞ {idx+1}", fontsize=10)
        st.pyplot(fig)

# --- –°—É–º–º–∞—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ---
df = pd.DataFrame(results, columns=["–°–µ–≥–º–µ–Ω—Ç", "A (–º¬≤)", "P (–º)", "R (–º)", "V (–º/—Å)", "Q (–º¬≥/—Å)", "Q (–ª/—Å)"])
total_Q = df["Q (–º¬≥/—Å)"].sum()

st.subheader("üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
st.dataframe(df.style.format({"A (–º¬≤)": "{:.6f}", "P (–º)": "{:.4f}", "R (–º)": "{:.4f}", "V (–º/—Å)": "{:.3f}", "Q (–º¬≥/—Å)": "{:.5f}", "Q (–ª/—Å)": "{:.3f}"}))
st.write(f"**–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –ª–∏–Ω–∏–∏: {total_Q:.5f} –º¬≥/—Å ({total_Q*1000:.3f} –ª/—Å)**")

# --- –û–±—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ (—Ä—è–¥–æ–º) ---
col1, col2 = st.columns(2)

with col1:
    fig, ax = plt.subplots(figsize=(4,3))
    ax.plot(df["–°–µ–≥–º–µ–Ω—Ç"], df["Q (–º¬≥/—Å)"], marker="o")
    ax.set_xlabel("–°–µ–≥–º–µ–Ω—Ç")
    ax.set_ylabel("Q, –º¬≥/—Å")
    ax.set_title("–†–∞—Å—Ö–æ–¥ Q –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    ax.grid(True)
    st.pyplot(fig)

with col2:
    ratios = np.linspace(0.05, 1.0, 100)
    Q_values = []
    for ratio in ratios:
        if shape == "–ö—Ä—É–≥–ª–∞—è":
            D, _ = segments[0][0]
            hh = ratio * D
            A, P = hydraulic_params_circular(D, hh)
        else:
            b, _ = segments[0][0]
            hh = ratio * h
            A, P = hydraulic_params_rectangular(b, hh)
        R, V, Q = manning_flow(A, P, S, n)
        Q_values.append(Q)

    fig, ax = plt.subplots(figsize=(4,3))
    ax.plot(ratios, Q_values, color="blue")
    ax.set_xlabel("h/D")
    ax.set_ylabel("Q, –º¬≥/—Å")
    ax.set_title("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å Q –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    ax.grid(True)
    st.pyplot(fig)

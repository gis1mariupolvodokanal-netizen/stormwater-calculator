import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import io

# ----------------------- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏ -----------------------
materials_n = {
    "–ë–µ—Ç–æ–Ω": 0.013,
    "–ü–í–•": 0.009,
    "–ß—É–≥—É–Ω": 0.014,
    "–ê—Å–±–µ—Å—Ç–æ—Ü–µ–º–µ–Ω—Ç": 0.011,
    "–°—Ç–∞–ª—å": 0.012
}

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤", layout="wide")
st.title("üíß –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ (–ú–∞–Ω–Ω–∏–Ω–≥) ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤, Excel –∏ —Å–µ—á–µ–Ω–∏—è")

# ----------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------------
def clip01(x):
    return max(0.0, min(1.0, x))

def circ_section_area_perimeter(D, h):
    """
    –ö—Ä—É–≥–ª–∞—è —Ç—Ä—É–±–∞. D ‚Äî –¥–∏–∞–º–µ—Ç—Ä, h ‚Äî –≤—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (0..D).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (A, P) ‚Äî –ø–ª–æ—â–∞–¥—å –∏ —Å–º–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä.
    """
    if h <= 0:
        return 0.0, 0.0
    if h >= D:
        r = D / 2.0
        A_full = np.pi * r**2
        P_full = 2.0 * np.pi * r
        return A_full, P_full
    r = D / 2.0
    # –ê—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è arccos –∫–ª–∏–ø–ø–∏—Ä—É–µ–º –æ—Ç -1 –¥–æ 1 –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    arg = (r - h) / r
    arg = np.clip(arg, -1.0, 1.0)
    theta = 2.0 * np.arccos(arg)  # —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–≥–æ–ª —Å–º–∞—á–∏–≤–∞–µ–º–æ–π —á–∞—Å—Ç–∏ (—Ä–∞–¥)
    A = 0.5 * r**2 * (theta - np.sin(theta))
    P = r * theta
    return A, P

def rect_section_area_perimeter(B, H, h):
    """
    –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ (—à–∏—Ä–∏–Ω–∞ B, –≤—ã—Å–æ—Ç–∞ H), h ‚Äî —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã (0..H).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (A, P).
    """
    if h <= 0:
        return 0.0, 0.0
    if h >= H:
        A_full = B * H
        P_full = B + 2.0 * H
        return A_full, P_full
    A = B * h
    P = B + 2.0 * h
    return A, P

def manning_Q(A, P, S, n):
    if A <= 0 or P <= 0 or S <= 0:
        return 0.0, 0.0, 0.0
    R = A / P
    V = (1.0 / n) * (R ** (2.0 / 3.0)) * (S ** 0.5)
    Q = A * V
    return R, V, Q

def draw_circular_cross_section(ax, D, h):
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Å–µ—á–µ–Ω–∏–µ –∫—Ä—É–≥–∞ —Å –∑–∞–ª–∏–≤–∫–æ–π –≤–æ–¥—ã –¥–æ —É—Ä–æ–≤–Ω—è h.
    –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: —Ü–µ–Ω—Ç—Ä –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (0,0), —Ä–∞–¥–∏—É—Å R = D/2.
    –í–æ–¥–∞ –æ—Ç y = -R –¥–æ y = -R + h.
    """
    R = D / 2.0
    # –ö–æ–Ω—Ç—É—Ä —Ç—Ä—É–±—ã
    circle = plt.Circle((0, 0), R, color="lightgray", zorder=1)
    ax.add_patch(circle)

    # –°–µ—Ç–∫–∞ —Ç–æ—á–µ–∫ –ø–æ x –∏ –≥—Ä–∞–Ω–∏—Ü—ã –∫—Ä—É–≥–∞
    x = np.linspace(-R, R, 600)
    y_upper = np.sqrt(np.maximum(R**2 - x**2, 0.0))
    y_lower = -y_upper

    # –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã
    y_surface = -R + h
    # –í–µ—Ä—Ö –ª–∏–Ω–∏–∏ –∑–∞–ª–∏–≤–∫–∏ ‚Äî –º–∏–Ω–∏–º—É–º –º–µ–∂–¥—É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π –∫—Ä—É–≥–∞ –∏ –ª–∏–Ω–∏–µ–π –≤–æ–¥—ã
    y_top = np.minimum(y_upper, y_surface)
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–º, –≥–¥–µ –≤–µ—Ä—Ö –∑–∞–ª–∏–≤–∫–∏ –≤—ã—à–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
    fill_mask = y_top > y_lower
    ax.fill_between(x[fill_mask], y_lower[fill_mask], y_top[fill_mask], color="blue", alpha=0.5, zorder=2)

    # –î–µ–∫–æ—Ä
    ax.set_aspect("equal", adjustable="box")
    pad = 0.06 * D
    ax.set_xlim(-R - pad, R + pad)
    ax.set_ylim(-R - pad, R + pad)
    ax.axis("off")

def draw_rect_cross_section(ax, B, H, h):
    """
    –ö—Ä–∞—Å–∏–≤–æ–µ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Å–µ—á–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∑–∞–ª–∏–≤–∫–æ–π –≤–æ–¥—ã –¥–æ h.
    –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: –æ—Ç y=-H/2 –¥–æ y=+H/2.
    –í–æ–¥–∞ –æ—Ç y=-H/2 –¥–æ y=-H/2 + h.
    """
    y_bottom = -H / 2.0
    # –ö–æ–Ω—Ç—É—Ä —Ç—Ä—É–±—ã
    ax.add_patch(plt.Rectangle((-B/2.0, -H/2.0), B, H, facecolor="lightgray", edgecolor="none", zorder=1))
    # –ó–∞–ª–∏–≤–∫–∞ –≤–æ–¥–æ–π
    h_clamped = np.clip(h, 0.0, H)
    ax.add_patch(plt.Rectangle((-B/2.0, y_bottom), B, h_clamped, facecolor="blue", alpha=0.5, edgecolor="none", zorder=2))
    # –î–µ–∫–æ—Ä
    ax.set_aspect("equal", adjustable="box")
    pad_x = 0.06 * max(B, 1e-6)
    pad_y = 0.06 * max(H, 1e-6)
    ax.set_xlim(-B/2.0 - pad_x, B/2.0 + pad_x)
    ax.set_ylim(-H/2.0 - pad_y, H/2.0 + pad_y)
    ax.axis("off")

# ----------------------- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö -----------------------
num_segments = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤", min_value=1, max_value=20, value=2, step=1)

segments = []
for i in range(num_segments):
    st.subheader(f"–°–µ–≥–º–µ–Ω—Ç {i+1}")
    c1, c2 = st.columns(2)

    with c1:
        shape = st.selectbox(f"–§–æ—Ä–º–∞ —Ç—Ä—É–±—ã (—Å–µ–≥–º–µ–Ω—Ç {i+1})", ["–ö—Ä—É–≥–ª–∞—è", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è"], key=f"shape_{i}")
        material = st.selectbox(f"–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç—Ä—É–±—ã (—Å–µ–≥–º–µ–Ω—Ç {i+1})", list(materials_n.keys()), key=f"mat_{i}")
        if shape == "–ö—Ä—É–≥–ª–∞—è":
            D = st.number_input(f"–î–∏–∞–º–µ—Ç—Ä, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=0.6, min_value=0.05, step=0.01, format="%.3f", key=f"D_{i}")
            h = st.number_input(f"–í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è h, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=0.3, min_value=0.0, step=0.01, format="%.3f", key=f"h_{i}")
            B, H = None, None
        else:
            B = st.number_input(f"–®–∏—Ä–∏–Ω–∞ B, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=0.6, min_value=0.05, step=0.01, format="%.3f", key=f"B_{i}")
            H = st.number_input(f"–í—ã—Å–æ—Ç–∞ H, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=0.6, min_value=0.05, step=0.01, format="%.3f", key=f"H_{i}")
            h = st.number_input(f"–í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è h, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=0.3, min_value=0.0, step=0.01, format="%.3f", key=f"hrect_{i}")

    with c2:
        top1 = st.number_input(f"–í—ã—Å–æ—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=246.00, step=0.01, key=f"top1_{i}")
        depth1 = st.number_input(f"–ì–ª—É–±–∏–Ω–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=5.50, step=0.01, key=f"depth1_{i}")
        top2 = st.number_input(f"–í—ã—Å–æ—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=245.00, step=0.01, key=f"top2_{i}")
        depth2 = st.number_input(f"–ì–ª—É–±–∏–Ω–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=5.60, step=0.01, key=f"depth2_{i}")
        length = st.number_input(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–¥—Ü–∞–º–∏, –º (—Å–µ–≥–º–µ–Ω—Ç {i+1})", value=50.0, min_value=0.1, step=0.1, key=f"L_{i}")

    segments.append({
        "shape": shape, "material": material, "D": None if shape!="–ö—Ä—É–≥–ª–∞—è" else D,
        "B": None if shape!="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è" else B,
        "H": None if shape!="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è" else H,
        "h": h, "top1": top1, "depth1": depth1, "top2": top2, "depth2": depth2, "L": length
    })

# ----------------------- –†–∞—Å—á—ë—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º -----------------------
rows = []
q_lps_list = []  # –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ
qh_sheet_rows = []  # –¥–ª—è –ª–∏—Å—Ç–∞ Q(h)

for idx, seg in enumerate(segments, start=1):
    n = materials_n[seg["material"]]
    invert1 = seg["top1"] - seg["depth1"]
    invert2 = seg["top2"] - seg["depth2"]
    S_raw = (invert1 - invert2) / max(seg["L"], 1e-6)
    if S_raw <= 0:
        st.warning(f"–°–µ–≥–º–µ–Ω—Ç {idx}: —É–∫–ª–æ–Ω S ‚â§ 0 (S={S_raw:.6f}). –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ S=1e-6.")
    S = max(S_raw, 1e-6)

    # –ö–ª–∏–ø–ø–∏–Ω–≥ h (–Ω–∞ –≤—Å—è–∫–∏–π)
    if seg["shape"] == "–ö—Ä—É–≥–ª–∞—è":
        D = seg["D"]
        if D is None:
            st.error(f"–°–µ–≥–º–µ–Ω—Ç {idx}: –Ω–µ —É–∫–∞–∑–∞–Ω –¥–∏–∞–º–µ—Ç—Ä.")
            continue
        h = np.clip(seg["h"], 0.0, D)
        A, P = circ_section_area_perimeter(D, h)
    else:
        B, H = seg["B"], seg["H"]
        if B is None or H is None:
            st.error(f"–°–µ–≥–º–µ–Ω—Ç {idx}: –Ω–µ —É–∫–∞–∑–∞–Ω—ã B/H.")
            continue
        h = np.clip(seg["h"], 0.0, H)
        A, P = rect_section_area_perimeter(B, H, h)

    R, V, Q = manning_Q(A, P, S, n)
    Q_lps = Q * 1000.0
    q_lps_list.append(Q_lps)

    # ---------- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ----------
    st.markdown(f"---\n### üìä –°–µ–≥–º–µ–Ω—Ç {idx}")
    st.write(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: **{seg['material']}**, n = `{n}`")
    st.write(f"–£–∫–ª–æ–Ω S: `{S:.6f}` ({S*100:.3f} %)")
    st.write(f"–ü–ª–æ—â–∞–¥—å A: `{A:.6f}` –º¬≤, —Å–º–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä P: `{P:.4f}` –º, –≥–∏–¥—Ä. —Ä–∞–¥–∏—É—Å R: `{R:.4f}` –º")
    st.write(f"–°–∫–æ—Ä–æ—Å—Ç—å V: `{V:.3f}` –º/—Å, **–†–∞—Å—Ö–æ–¥ Q: `{Q:.5f}` –º¬≥/—Å = `{Q_lps:.2f}` –ª/—Å**")

    # ---------- –ì—Ä–∞—Ñ–∏–∫–∏ —Ä—è–¥–æ–º ----------
    g1, g2 = st.columns(2)

    with g1:
        fig, ax = plt.subplots(figsize=(3.2, 3.2))
        if seg["shape"] == "–ö—Ä—É–≥–ª–∞—è":
            draw_circular_cross_section(ax, D, h)
        else:
            draw_rect_cross_section(ax, B, H, h)
        ax.set_title("–ü–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Å–µ—á–µ–Ω–∏–µ", fontsize=10)
        st.pyplot(fig)

    with g2:
        # –ö—Ä–∏–≤–∞—è Q(h) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        ratios = np.linspace(0.05, 1.0, 120)  # –≥–ª–∞–¥–∫–∞—è –∫—Ä–∏–≤–∞—è
        Qs = []
        for ratio in ratios:
            if seg["shape"] == "–ö—Ä—É–≥–ª–∞—è":
                hh = ratio * D
                Ai, Pi = circ_section_area_perimeter(D, hh)
            else:
                hh = ratio * H
                Ai, Pi = rect_section_area_perimeter(B, H, hh)
            _, _, Qi = manning_Q(Ai, Pi, S, n)
            Qs.append(Qi)
            # –°–æ–±–µ—Ä—ë–º –≤ Excel-–ª–∏—Å—Ç Q(h)
            qh_sheet_rows.append({
                "–°–µ–≥–º–µ–Ω—Ç": idx,
                "ratio": ratio,
                "h (–º)": hh,
                "Q (–º¬≥/—Å)": Qi
            })

        fig2, ax2 = plt.subplots(figsize=(4.0, 3.0))
        ax2.plot(ratios, Qs)
        ax2.set_xlabel("h/D" if seg["shape"] == "–ö—Ä—É–≥–ª–∞—è" else "h/H")
        ax2.set_ylabel("Q, –º¬≥/—Å")
        ax2.set_title("Q(h) –¥–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞", fontsize=10)
        ax2.grid(True)
        st.pyplot(fig2)

    # —Å—Ç—Ä–æ–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    rows.append({
        "–°–µ–≥–º–µ–Ω—Ç": idx,
        "–§–æ—Ä–º–∞": seg["shape"],
        "–ú–∞—Ç–µ—Ä–∏–∞–ª": seg["material"],
        "S (-)": S,
        "A (–º¬≤)": A,
        "P (–º)": P,
        "R (–º)": R,
        "V (–º/—Å)": V,
        "Q (–º¬≥/—Å)": Q,
        "Q (–ª/—Å)": Q_lps
    })

# ----------------------- –ò—Ç–æ–≥–∏ –∏ –æ–±—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ -----------------------
if rows:
    df = pd.DataFrame(rows)
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    st.dataframe(df.style.format({
        "S (-)": "{:.6f}", "A (–º¬≤)": "{:.6f}", "P (–º)": "{:.4f}",
        "R (–º)": "{:.4f}", "V (–º/—Å)": "{:.3f}", "Q (–º¬≥/—Å)": "{:.5f}", "Q (–ª/—Å)": "{:.2f}"
    }))

    total_Q_lps = df["Q (–ª/—Å)"].sum()
    st.markdown(f"### üí° –°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –ø–æ –ª–∏–Ω–∏–∏: **{total_Q_lps:.2f} –ª/—Å**")

    cA, cB = st.columns(2)

    with cA:
        # –°—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ Q –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        figb, axb = plt.subplots(figsize=(4.2, 3.0))
        axb.bar(df["–°–µ–≥–º–µ–Ω—Ç"].astype(str), df["Q (–º¬≥/—Å)"])
        axb.set_xlabel("–°–µ–≥–º–µ–Ω—Ç")
        axb.set_ylabel("Q, –º¬≥/—Å")
        axb.set_title("–†–∞—Å—Ö–æ–¥ Q –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º", fontsize=10)
        axb.grid(axis="y", alpha=0.3)
        st.pyplot(figb)

    with cB:
        # –°—É–º–º–∞—Ä–Ω–∞—è Q(h) –¥–ª—è ¬´—ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ¬ª —Å–µ–≥–º–µ–Ω—Ç–∞? ‚Äî –Ω–µ —Å—É–º–º–∏—Ä—É–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è 1-–≥–æ,
        # —Ç.–∫. —É–∫–ª–æ–Ω—ã/—Ä–∞–∑–º–µ—Ä—ã/–º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è. –í Excel –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.
        st.info("–ö—Ä–∏–≤—ã–µ Q(h) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel (–ª–∏—Å—Ç ¬´Q(h)¬ª).")

    # ----------------------- –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel -----------------------
    qh_df = pd.DataFrame(qh_sheet_rows) if qh_sheet_rows else pd.DataFrame(
        columns=["–°–µ–≥–º–µ–Ω—Ç", "ratio", "h (–º)", "Q (–º¬≥/—Å)"]
    )
    output = io.BytesIO()
    try:
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="–°–µ–≥–º–µ–Ω—Ç—ã")
            qh_df.to_excel(writer, index=False, sheet_name="Q(h)")
        xlsx_bytes = output.getvalue()
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel",
            data=xlsx_bytes,
            file_name="—Ä–∞—Å—á–µ—Ç_–ª–∏–≤–Ω–µ–≤–∫–∏.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    except Exception as e:
        st.error(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        st.download_button(
            "üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
            data=df.to_csv(index=False).encode("utf-8"),
            file_name="—Ä–∞—Å—á–µ—Ç_–ª–∏–≤–Ω–µ–≤–∫–∏.csv",
            mime="text/csv",
        )

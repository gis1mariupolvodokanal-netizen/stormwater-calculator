import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# ===== –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç–∏ n =====
materials_n = {
    "–ë–µ—Ç–æ–Ω": 0.013,
    "–ü–í–•": 0.009,
    "–ß—É–≥—É–Ω": 0.014,
    "–ê—Å–±–µ—Å—Ç–æ—Ü–µ–º–µ–Ω—Ç": 0.011,
    "–°—Ç–∞–ª—å": 0.012
}

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã =====
st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤", layout="wide")
st.title("üíß –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –ª–∏–≤–Ω–µ–≤—ã—Ö —Å—Ç–æ–∫–æ–≤ (—Ñ–æ—Ä–º—É–ª–∞ –ú–∞–Ω–Ω–∏–Ω–≥–∞)")

# ===== –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ =====
col1, col2 = st.columns(2)
with col1:
    D = st.number_input("–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã, –º", value=0.1, step=0.01, format="%.3f")
    h = st.number_input("–í—ã—Å–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º, –º", value=0.07, step=0.01, format="%.3f")
    material = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç—Ä—É–±—ã", list(materials_n.keys()))
with col2:
    top1 = st.number_input("–û—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º", value=246.0, step=0.01)
    depth1 = st.number_input("–ì–ª—É–±–∏–Ω–∞ 1-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º", value=5.55, step=0.01)
    top2 = st.number_input("–û—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º", value=245.0, step=0.01)
    depth2 = st.number_input("–ì–ª—É–±–∏–Ω–∞ 2-–≥–æ –∫–æ–ª–æ–¥—Ü–∞, –º", value=5.57, step=0.01)
    length = st.number_input("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–¥—Ü–∞–º–∏, –º", value=73.2, step=0.1)

# ===== –†–∞—Å—á—ë—Ç —É–∫–ª–æ–Ω–∞ =====
invert1 = top1 - depth1
invert2 = top2 - depth2
S = (invert1 - invert2) / length  # –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π —É–∫–ª–æ–Ω

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞ =====
def manning_flow(D, h, n, S):
    r = D / 2
    theta = 2 * np.arccos(np.clip((r - h) / r, -1, 1))
    A = (r**2 / 2) * (theta - np.sin(theta))
    P = r * theta
    R = A / P
    V = (1 / n) * (R ** (2/3)) * np.sqrt(S)
    Q = A * V
    return A, P, R, V, Q

# ===== –†–∞—Å—á—ë—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è =====
n = materials_n[material]
A, P, R, V, Q_m3s = manning_flow(D, h, n, S)
Q_ls = Q_m3s * 1000  # –ª/—Å

st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
st.write(f"–£–∫–ª–æ–Ω S: `{S:.5f}` ({S*100:.3f} %)")
st.write(f"–ü–ª–æ—â–∞–¥—å A: `{A:.6f}` –º¬≤")
st.write(f"–°–º–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–º–µ—Ç—Ä P: `{P:.4f}` –º")
st.write(f"–ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–π —Ä–∞–¥–∏—É—Å R: `{R:.4f}` –º")
st.write(f"–°–∫–æ—Ä–æ—Å—Ç—å V: `{V:.3f}` –º/—Å")
st.write(f"**–†–∞—Å—Ö–æ–¥ Q: `{Q_m3s:.5f}` –º¬≥/—Å  = `{Q_ls:.3f}` –ª/—Å**")

# ===== –¢–∞–±–ª–∏—Ü–∞ Q –¥–ª—è —Ä–∞–∑–Ω—ã—Ö h/D =====
ratios = np.linspace(0.05, 1.0, 200)
table_data = []
for ratio in ratios:
    hh = ratio * D
    A_i, P_i, R_i, V_i, Q_i = manning_flow(D, hh, n, S)
    table_data.append([ratio, hh, A_i, P_i, R_i, V_i, Q_i, Q_i*1000])

df = pd.DataFrame(table_data, columns=["h/D", "h (–º)", "A (–º¬≤)", "P (–º)", "R (–º)", "V (–º/—Å)", "Q (–º¬≥/—Å)", "Q (–ª/—Å)"])

# ===== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ =====
max_row = df.loc[df["Q (–º¬≥/—Å)"].idxmax()]
max_ratio = max_row["h/D"]
max_Q_ls = max_row["Q (–ª/—Å)"]

st.subheader("‚≠ê –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞")
st.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ `h/D ‚âà {max_ratio:.2f}`")
st.write(f"**Qmax = {max_Q_ls:.3f} –ª/—Å**")

# ===== –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Q –æ—Ç h/D —Å –æ—Ç–º–µ—Ç–∫–æ–π –º–∞–∫—Å–∏–º—É–º–∞ =====
fig1, ax1 = plt.subplots(figsize=(6, 4))
ax1.plot(df["h/D"], df["Q (–ª/—Å)"], color="blue", label="Q(h)")
ax1.scatter(max_ratio, max_Q_ls, color="red", zorder=5, label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥")
ax1.annotate(f"Qmax={max_Q_ls:.1f} –ª/—Å\nh/D={max_ratio:.2f}", 
             xy=(max_ratio, max_Q_ls), xytext=(max_ratio+0.05, max_Q_ls),
             arrowprops=dict(facecolor='red', shrink=0.05), fontsize=9)
ax1.set_xlabel("h/D")
ax1.set_ylabel("Q, –ª/—Å")
ax1.set_title("–†–∞—Å—Ö–æ–¥ Q –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç h/D")
ax1.grid(True, linestyle='--', alpha=0.7)
ax1.legend()
st.pyplot(fig1)

# ===== –ß–µ—Ä—Ç—ë–∂ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è —Ç—Ä—É–±—ã =====
fig2, ax2 = plt.subplots(figsize=(5, 5))
r = D / 2
circle = plt.Circle((0, 0), r, color="lightgray", zorder=1)
ax2.add_patch(circle)

x = np.linspace(-r, r, 500)
y_circle = np.sqrt(r**2 - x**2)
y_water = np.clip(y_circle, -r, h - r)
ax2.fill_between(x, -r, y_water, color="blue", alpha=0.5)

# –ü–æ–¥–ø–∏—Å–∏
ax2.annotate("D", xy=(0, r + 0.01), ha="center", fontsize=10)
ax2.annotate("h", xy=(r + 0.01, -r + h/2), fontsize=10)

ax2.set_aspect("equal", adjustable="datalim")
ax2.set_xlim(-r - 0.05, r + 0.05)
ax2.set_ylim(-r - 0.05, r + 0.05)
ax2.axis("off")
ax2.set_title("–ü–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Å–µ—á–µ–Ω–∏–µ —Ç—Ä—É–±—ã", fontsize=12)
st.pyplot(fig2)

# ===== –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è =====
st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–∞ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏")
st.dataframe(df.style.format({"h/D": "{:.2f}", "h (–º)": "{:.3f}", "A (–º¬≤)": "{:.6f}", "P (–º)": "{:.4f}",
                              "R (–º)": "{:.4f}", "V (–º/—Å)": "{:.3f}", "Q (–º¬≥/—Å)": "{:.5f}", "Q (–ª/—Å)": "{:.3f}"}))

csv = df.to_csv(index=False).encode("utf-8")
st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ CSV", csv, "Q_table.csv", "text/csv")